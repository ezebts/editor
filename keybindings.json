// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "shift+enter",
        "command": "jupyter.execSelectionInteractive",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.execSelectionInteractive",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+alt+enter",
        "command": "python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "shift+enter",
        "command": "-jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "delete",
        "command": "jupyter.deleteCells",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+oem_1 x",
        "command": "-jupyter.deleteCells",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "delete",
        "command": "jupyter.interactive.removeCell"
    },
    {
        "key": "shift+delete",
        "command": "jupyter.notebookeditor.removeallcells"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickSwitchWindow"
    },
    {
        "key": "shift+tab shift+down",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "shift+tab shift+down",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "shift+tab",
        "command": "-acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "-insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "shift+tab",
        "command": "-jumpToPrevSnippetPlaceholder",
        "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
    },
    {
        "key": "shift+tab",
        "command": "-outdent",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "shift+tab shift+right",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "shift+tab shift+left",
        "command": "workbench.action.focusPreviousGroup"
    },
    {
        "key": "ctrl+g ctrl+left",
        "command": "workbench.action.newGroupLeft"
    },
    {
        "key": "ctrl+g ctrl+right",
        "command": "workbench.action.newGroupRight"
    },
    {
        "key": "ctrl+g ctrl+up",
        "command": "workbench.action.newGroupAbove"
    },
    {
        "key": "ctrl+g ctrl+down",
        "command": "workbench.action.newGroupBelow"
    }
]